name: 聚合构建

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: windows-amd64
            os: windows-latest
            artifact_name: phira-mp-server-windows-amd64.exe
            
          - platform: macos-amd64
            os: macos-latest
            artifact_name: phira-mp-server-macos-amd64
            
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: phira-mp-server-macos-arm64
            
          - platform: linux-amd64
            os: ubuntu-latest
            artifact_name: phira-mp-server-linux-amd64
            
          - platform: linux-arm64
            os: ubuntu-latest
            artifact_name: phira-mp-server-linux-arm64
            use_container: true
            
          - platform: freebsd-amd64
            os: ubuntu-latest
            target: x86_64-unknown-freebsd
            artifact_name: phira-mp-server-freebsd-amd64

    runs-on: ${{ matrix.os }}
    name: 构建 ${{ matrix.platform }}
    
    steps:
      - name: 检查仓库
        uses: actions/checkout@v3

      # 常规构建步骤
      - name: 设置Rust环境 (除 ARM 64 Linux)
        if: ${{ !matrix.use_container }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: 安装依赖 (仅 FreeBSD)
        if: matrix.platform == 'freebsd-amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        shell: bash
        
      - name: 安装 cross (对于 FreeBSD)
        if: matrix.platform == 'freebsd-amd64'
        run: |
          cargo install cross
        shell: bash

      # ARM64 专用构建步骤
      - name: 针对于 ARM64 Linux 的构建并且准备产物
        if: matrix.platform == 'linux-arm64'
        uses: uraimo/run-on-arch-action@v2
        id: arm64build
        with:
          arch: aarch64
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/build_output"
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
          shell: /bin/bash
          install: |
            apt-get update -q -y
            apt-get install -q -y curl build-essential pkg-config libssl-dev
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          run: |
            source "$HOME/.cargo/env"
            cd /workspace
            cargo build --release -p phira-mp-server
            cp target/release/phira-mp-server build_output/phira-mp-server-linux-arm64

      # 非 ARM64 的构建步骤
      - name: 通用构建
        if: ${{ !matrix.use_container }}
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "freebsd-amd64" ]]; then
            # Use cross for FreeBSD
            cross build --release -p phira-mp-server --target ${{ matrix.target }}
          elif [[ "${{ matrix.platform }}" == "macos-arm64" ]]; then
            # For MacOS ARM64, use cargo with target
            cargo build --release -p phira-mp-server --target ${{ matrix.target }}
          else
            # For other platforms, use native cargo build
            cargo build --release -p phira-mp-server
          fi

      # 非 ARM64 的产物准备
      - name: 准备构建产物 （除 ARM 64 Linux）
        if: ${{ !matrix.use_container }}
        shell: bash
        run: |
          mkdir -p build_output
          if [[ "${{ matrix.platform }}" == "freebsd-amd64" ]]; then
            cp "target/${{ matrix.target }}/release/phira-mp-server" "build_output/${{ matrix.artifact_name }}"
          elif [[ "${{ matrix.platform }}" == "macos-arm64" ]]; then
            cp "target/${{ matrix.target }}/release/phira-mp-server" "build_output/${{ matrix.artifact_name }}"
          elif [[ "${{ matrix.platform }}" == "windows-amd64" ]]; then
            cp "target/release/phira-mp-server.exe" "build_output/${{ matrix.artifact_name }}"
          else
            cp "target/release/phira-mp-server" "build_output/${{ matrix.artifact_name }}"
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifact
          path: build_output/${{ matrix.artifact_name }}

  publish:
    permissions: 
      contents: write
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag }}
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
      - name: 下载各Job的构建产物
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: 将构建产物上传到Release
        uses: softprops/action-gh-release@v2
        if: ${{ success() }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          files: bin/*
          prerelease: false
