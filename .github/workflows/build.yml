name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v1.0.0'

jobs:
  build-native:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-amd64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            name: windows-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'TeamFlos/phira-mp'
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install Linux Dependencies (AMD64)
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      - name: Set up ARM64 cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            pkg-config
          
          # Create a standalone sysroot with OpenSSL
          mkdir -p sysroot
          cd sysroot
          wget http://ports.ubuntu.com/pool/main/o/openssl/libssl-dev_3.0.2-0ubuntu1_arm64.deb
          wget http://ports.ubuntu.com/pool/main/o/openssl/libssl3_3.0.2-0ubuntu1_arm64.deb
          for deb in *.deb; do dpkg-deb -x $deb .; done
          cd ..
          
          # Set up cross-compilation environment
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$(pwd)/sysroot" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(pwd)/sysroot/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=$(pwd)/sysroot/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(pwd)/sysroot/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(pwd)/sysroot/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
      
      - name: Build Linux
        if: runner.os == 'Linux'
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Build Windows
        if: runner.os == 'Windows'
        run: |
          cargo build --release --target ${{ matrix.target }}
        
      - name: Rename artifacts
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv target/${{ matrix.target }}/release/phira-mp-server.exe phira-mp-server-${{ matrix.name }}.exe
          else
            mv target/${{ matrix.target }}/release/phira-mp-server phira-mp-server-${{ matrix.name }}
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phira-mp-server-${{ matrix.name }}
          path: |
            phira-mp-server-${{ matrix.name }}
            phira-mp-server-${{ matrix.name }}.exe
          if-no-files-found: ignore

  build-freebsd:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'TeamFlos/phira-mp'
      
      - name: Install cross
        run: cargo install cross
      
      - name: Build FreeBSD
        run: |
          cross build --release --target x86_64-unknown-freebsd
      
      - name: Rename artifacts
        run: |
          mv target/x86_64-unknown-freebsd/release/phira-mp-server phira-mp-server-freebsd-amd64
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phira-mp-server-freebsd-amd64
          path: phira-mp-server-freebsd-amd64

  create-release:
    needs: [build-native, build-freebsd]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          generate_release_notes: true
          files: |
            */phira-mp-server-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
