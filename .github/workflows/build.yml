name: Cross-Compile and Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag'
        required: false
        default: 'v1.0.0'

jobs:
  # Build for Windows (amd64 & arm64) using cargo for local build
  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64]  # x86_64 和 aarch64 架构
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust for Windows
        run: |
          choco install rust

      - name: Build project for Windows (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x86_64" ]; then
            cargo build --release -p phira-mp-server --target x86_64-pc-windows-msvc  # amd64 架构
          elif [ "${{ matrix.architecture }}" == "aarch64" ]; then
            cargo build --release -p phira-mp-server --target aarch64-pc-windows-msvc  # arm64 架构
          fi

      - name: Archive build artifact
        run: |
          mkdir -p build_output/windows-${{ matrix.architecture }}
          cp target/${{ matrix.architecture }}-pc-windows-msvc/release/phira-mp-server.exe build_output/windows-${{ matrix.architecture }}/
          mv build_output/windows-${{ matrix.architecture }}/phira-mp-server.exe build_output/windows-${{ matrix.architecture }}/phira-mp-server-windows-${{ matrix.architecture }}.exe

  # Build for macOS (amd64 & arm64) using cargo for local build
  build_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64]  # x86_64 和 aarch64 架构
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust for macOS
        run: |
          brew install rust

      - name: Build project for macOS (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x86_64" ]; then
            cargo build --release -p phira-mp-server --target x86_64-apple-darwin  # amd64 架构
          elif [ "${{ matrix.architecture }}" == "aarch64" ]; then
            cargo build --release -p phira-mp-server --target aarch64-apple-darwin  # arm64 架构
          fi

      - name: Archive build artifact
        run: |
          mkdir -p build_output/macos-${{ matrix.architecture }}
          cp target/${{ matrix.architecture }}-apple-darwin/release/phira-mp-server build_output/macos-${{ matrix.architecture }}/
          mv build_output/macos-${{ matrix.architecture }}/phira-mp-server build_output/macos-${{ matrix.architecture }}/phira-mp-server-macos-${{ matrix.architecture }}

  # Build for Linux (amd64 & arm64) using cargo for local build
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, aarch64]  # x86_64 和 aarch64 架构
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust for Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y rustc

      - name: Build project for Linux (${{ matrix.architecture }})
        run: |
          if [ "${{ matrix.architecture }}" == "x86_64" ]; then
            cargo build --release -p phira-mp-server --target x86_64-unknown-linux-gnu  # amd64 架构
          elif [ "${{ matrix.architecture }}" == "aarch64" ]; then
            cargo build --release -p phira-mp-server --target aarch64-unknown-linux-gnu  # arm64 架构
          fi

      - name: Archive build artifact
        run: |
          mkdir -p build_output/linux-${{ matrix.architecture }}
          cp target/${{ matrix.architecture }}-unknown-linux-gnu/release/phira-mp-server build_output/linux-${{ matrix.architecture }}/
          mv build_output/linux-${{ matrix.architecture }}/phira-mp-server build_output/linux-${{ matrix.architecture }}/phira-mp-server-linux-${{ matrix.architecture }}

  # Build for FreeBSD (amd64) using cross
  build_freebsd:
    runs-on: ubuntu-latest  # 这里可以使用 Ubuntu 来进行交叉编译
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust and cross for FreeBSD
        run: |
          cargo install cross

      - name: Build project for FreeBSD (amd64)
        run: |
          cross build --release -p phira-mp-server --target x86_64-unknown-freebsd  # amd64 架构

      - name: Archive build artifact
        run: |
          mkdir -p build_output/freebsd-amd64
          cp target/x86_64-unknown-freebsd/release/phira-mp-server build_output/freebsd-amd64/
          mv build_output/freebsd-amd64/phira-mp-server build_output/freebsd-amd64/phira-mp-server-freebsd-amd64

  # Upload build artifacts
  publish:
    needs: [build_windows, build_macos, build_linux, build_freebsd]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build_output

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          files: build_output/**/*  # 将所有文件上传
          prerelease: false
