name: Release Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: phira-mp-server-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: phira-mp-server-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: phira-mp-server-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: phira-mp-server-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: phira-mp-server-macos-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation dependencies
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        sudo apt install pkg-config libssl-dev

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
    
    - name: Build
      run: cargo build --release -p phira-mp-server --target ${{ matrix.target }}
    
    - name: Rename binary
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/${{ matrix.target }}/release/phira-mp-server.exe" "${{ matrix.artifact_name }}"
        else
          cp "target/${{ matrix.target }}/release/phira-mp-server" "${{ matrix.artifact_name }}"
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        assets=()
        for asset in ./*/*.exe ./*/*; do
          if [ -f "$asset" ]; then
            assets+=("-a" "$asset")
          fi
        done
        gh release create ${{ github.event.inputs.tag }} \
          -t "Release ${{ github.event.inputs.tag }}" \
          -n "Release ${{ github.event.inputs.tag }}" \
          "${assets[@]}"
