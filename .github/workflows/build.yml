name: Cross-Compile and Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag'
        required: false
        default: 'v1.0.0'

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: windows-amd64
            os: windows-latest
            artifact_name: phira-mp-server-windows-amd64.exe
            
          - platform: macos-amd64
            os: macos-latest
            artifact_name: phira-mp-server-macos-amd64
            
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: phira-mp-server-macos-arm64
            
          - platform: linux-amd64
            os: ubuntu-latest
            artifact_name: phira-mp-server-linux-amd64
            
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: phira-mp-server-linux-arm64
            
          - platform: freebsd-amd64
            os: ubuntu-latest
            target: x86_64-unknown-freebsd
            artifact_name: phira-mp-server-freebsd-amd64

    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install dependencies (for FreeBSD only)
        if: matrix.platform == 'freebsd-amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        shell: bash
        
      - name: Install cross (for cross-compilation)
        if: matrix.platform == 'freebsd-amd64' || matrix.platform == 'linux-arm64'
        run: |
          cargo install cross
        shell: bash

      - name: Setup ARM64 tools (for Linux ARM64)
        if: matrix.platform == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y qemu-user qemu-user-static
        shell: bash

      - name: Build project
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "freebsd-amd64" || "${{ matrix.platform }}" == "linux-arm64" ]]; then
            # Use cross for FreeBSD and Linux ARM64
            cross build --release -p phira-mp-server --target ${{ matrix.target }}
          elif [[ "${{ matrix.platform }}" == "macos-arm64" ]]; then
            # For MacOS ARM64, use cargo with target
            cargo build --release -p phira-mp-server --target ${{ matrix.target }}
          else
            # For other platforms, use native cargo build
            cargo build --release -p phira-mp-server
          fi

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p build_output
          if [[ "${{ matrix.platform }}" == "freebsd-amd64" || "${{ matrix.platform }}" == "linux-arm64" ]]; then
            # For cross-compiled targets
            cp "target/${{ matrix.target }}/release/phira-mp-server" "build_output/${{ matrix.artifact_name }}"
          elif [[ "${{ matrix.platform }}" == "macos-arm64" ]]; then
            # For MacOS ARM64
            cp "target/${{ matrix.target }}/release/phira-mp-server" "build_output/${{ matrix.artifact_name }}"
          elif [[ "${{ matrix.platform }}" == "windows-amd64" ]]; then
            # For Windows
            cp "target/release/phira-mp-server.exe" "build_output/${{ matrix.artifact_name }}"
          else
            # For native builds
            cp "target/release/phira-mp-server" "build_output/${{ matrix.artifact_name }}"
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifact
          path: build_output/${{ matrix.artifact_name }}

  publish:
    permissions: 
      contents: write
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag }}
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        if: ${{ success() }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          files: bin/*
          prerelease: false
